{"version":3,"sources":["redux/actions/actions.js","redux/reducers/types.js","components/Alert.jsx","components/PostForm.jsx","components/Post.jsx","components/Posts.jsx","components/Loader.jsx","components/FetchedPosts.jsx","App.js","redux/reducers/postsReducer.js","redux/reducers/appReducer.js","redux/rootReducer.js","redux/customMiddleware/mdwBadWords.js","redux/sagas/worker/sagaWorker.js","redux/sagas/watcher/sagasWatcher.js","redux/rootSaga.js","store.js","index.js"],"names":["showAlert","text","dispatch","type","payload","setTimeout","Alert","alertMsg","className","role","PostForm","Component","constructor","props","super","submitHandler","event","preventDefault","title","this","state","trim","newPost","id","Date","now","toString","createPost","setState","changeInputHandler","persist","prev","target","name","value","render","clearPosts","onSubmit","htmlFor","placeholder","onChange","onClick","mapDispatchToProps","post","localStorage","removeItem","connect","app","alert","Post","posts","undefined","length","map","key","Loader","FetchedPost","useDispatch","useSelector","fetchedPosts","loading","App","useEffect","WOW","live","mobile","init","initialState","rootReducer","combineReducers","action","badWords","sagaWorker","put","call","fetch","response","apply","json","message","sagaWatcher","watchPosts","takeEvery","all","rootSaga","saga","createSagaMiddleware","preloadedState","getItem","JSON","parse","devTools","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","composeEnchancer","compose","middleware","thunk","next","filter","w","includes","store","createStore","applyMiddleware","run","subscribe","getState","setItem","stringify","document","getElementById"],"mappings":"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","file":"static/js/main.5aa4620c.chunk.js","sourcesContent":["import { CREATE_POST, REQUEST_POSTS, SHOW_LOADER, HIDE_LOADER, SHOW_ALERT, HIDE_ALERT, CLEAR_POST } from './../reducers/types';\r\n\r\nexport function createPost(post) {\r\n    return {\r\n        type: CREATE_POST,\r\n        payload: post\r\n    };\r\n};\r\nexport function clearPosts() {\r\n    localStorage.removeItem('myPosts');\r\n    return { type: CLEAR_POST };\r\n};\r\n\r\nexport function showLoader() {\r\n    return { type: SHOW_LOADER };\r\n};\r\nexport function hideLoader() {\r\n    return { type: HIDE_LOADER };\r\n};\r\nexport function showAlert(text) {\r\n    return dispatch => {\r\n        dispatch({ type: SHOW_ALERT, payload: text });\r\n        setTimeout(() => {\r\n            dispatch(hideAlert());\r\n        }, 2500);\r\n    };\r\n};\r\n\r\nexport function hideAlert() {\r\n    return { type: HIDE_ALERT };\r\n\r\n\r\n};\r\n\r\n\r\nexport function fetchPosts() {\r\n    return {\r\n        type: REQUEST_POSTS\r\n    }\r\n    // return async (dispatch) => {\r\n    //     try {\r\n    //         dispatch(showLoader());\r\n    //         const response = await fetch('https://jsonplaceholder.typicaode.com/posts?_limit=7');\r\n    //         const json = await response.json();\r\n    //         dispatch({ type: FETCH_POST, payload: json });\r\n    //         dispatch(hideLoader())\r\n    //     } catch (error) {\r\n    //         dispatch(showAlert(error.message));\r\n    //         dispatch(hideLoader());\r\n    //     };\r\n\r\n    // };\r\n};\r\n\r\n","export const CREATE_POST = 'CREATE_POST';\r\nexport const FETCH_POST = 'FETCH_POST';\r\nexport const REQUEST_POSTS = 'REQUEST_POSTS';\r\nexport const CLEAR_POST = 'CLEAR_POST';\r\nexport const SHOW_LOADER = 'SHOW_LOADER';\r\nexport const HIDE_LOADER = 'HIDE_LOADER';\r\nexport const SHOW_ALERT = 'SHOW_ALERT';\r\nexport const HIDE_ALERT = 'HIDE_ALERT';\r\n","import React from 'react';\r\n\r\nexport const Alert = ({ alertMsg }) => {\r\n    return (\r\n        <div className=\"alert alert-warning\" role=\"alert\">\r\n            {alertMsg}\r\n        </div>\r\n    );\r\n};\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createPost, showAlert, clearPosts } from './../redux/actions/actions';\r\nimport { Alert } from './Alert';\r\n\r\n\r\nclass PostForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: ''\r\n        };\r\n    };\r\n \r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        const { title } = this.state;\r\n        \r\n        if (!title.trim()) {\r\n            return this.props.showAlert(`Title post can't be empty`);\r\n        };\r\n        const newPost = {\r\n            title, id: Date.now().toString()\r\n        };\r\n\r\n        this.props.createPost(newPost);\r\n        this.setState({ title: '' });\r\n    };\r\n    changeInputHandler = (event) => {\r\n        event.persist();\r\n\r\n        this.setState(prev => ({\r\n            ...prev, ...{\r\n                [event.target.name]: event.target.value\r\n            }\r\n        }));\r\n    };\r\n    render() {\r\n        const { clearPosts, alertMsg } = this.props;\r\n        return (\r\n            <form onSubmit={this.submitHandler} className='mb-3 row'>\r\n                {alertMsg && <Alert alertMsg={alertMsg} />}\r\n                <div className=\"col-10\">\r\n                    <label htmlFor=\"title\" className=\"form-label\">Create new post title</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Post Title\"\r\n                        className=\"form-control\"\r\n                        id=\"title\"\r\n                        name='title'\r\n                        value={this.state.title}\r\n                        onChange={this.changeInputHandler}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-2 d-flex align-items-end justify-content-around\">\r\n                    <button className=\"btn btn-success\" type='submit'>Create</button>\r\n                    <button className=\"btn btn-danger\" onClick={clearPosts} type='button'>Clear&nbsp;data</button>\r\n                </div>\r\n\r\n            </form>\r\n        );\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    createPost,\r\n    showAlert,\r\n    clearPosts\r\n};\r\nconst mapStateToProps = (state) => ({\r\n    alertMsg: state.app.alert\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostForm);","import React from 'react';\r\n\r\n\r\nconst Post = ({ post }) => {\r\n    return (\r\n        <div className='card wow fadeInDown'>\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-title\">{post.title}</h5>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default Post;","import React from 'react';\r\nimport Post from './Post';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Posts = ({ posts }) => {\r\n\r\n    if (posts === undefined || !posts.length) {\r\n        return <p>Has no posts</p>;\r\n    };\r\n    return posts.map(post => <Post post={post} key={post.id} />);\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.posts.posts\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(Posts);","import React from 'react';\r\n\r\nexport const Loader = () => {\r\n    return (\r\n        <div className=\"text-center\">\r\n            <div className=\"spinner-border text-primary\" role=\"status\">\r\n                <span className=\"sr-only\">Loading...</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport Post from './Post';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchPosts } from '../redux/actions/actions';\r\nimport { Loader } from './Loader';\r\n\r\nconst FetchedPost = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const posts = useSelector((state) => state.posts.fetchedPosts);\r\n    const loading = useSelector((state) => state.app.loading);\r\n\r\n    if (loading) {\r\n        return <Loader />\r\n    }\r\n\r\n    if (posts === undefined || !posts.length) {\r\n        return (\r\n            <>\r\n                <p>Has no posts</p>\r\n                <button\r\n                    className='btn btn-primary'\r\n                    onClick={() => dispatch(fetchPosts())}\r\n                >Load Posts</button>\r\n            </>\r\n        );\r\n\r\n    };\r\n    return posts.map(post => <Post post={post} key={post.id} />);\r\n};\r\nexport default FetchedPost;","import React, { useEffect } from 'react';\nimport PostForm from './components/PostForm';\nimport Posts from './components/Posts';\nimport FetchedPost from './components/FetchedPosts';\nimport WOW from 'wowjs';\n\nfunction App() {\n    useEffect(() => {\n        const wow = new WOW.WOW({\n            live: false,\n            mobile: true\n        });\n        wow.init();\n    });\n  return (\n    <div className=\"container pt-3\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <PostForm />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <h2>Локальные посты</h2>\n          <Posts />\n        </div>\n        <div className=\"col\">\n          <h2>API посты</h2>\n          <FetchedPost />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { CREATE_POST, FETCH_POST, CLEAR_POST } from './types';\r\n\r\n\r\nconst initialState = {\r\n    posts: [],\r\n    fetchedPosts: []\r\n};\r\n\r\nexport const postReducers = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case CREATE_POST:\r\n            // return { ...state, posts: state.posts.concat(action.payload) }\r\n            return { ...state, posts: [...state.posts, action.payload] };\r\n        case FETCH_POST:\r\n            return { ...state, fetchedPosts: action.payload };\r\n        case CLEAR_POST:\r\n            return { ...state, fetchedPosts: [], posts: [] };\r\n        default:\r\n            return state;\r\n    }\r\n}","\r\nimport { SHOW_LOADER, HIDE_LOADER, SHOW_ALERT, HIDE_ALERT } from './types';\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    alert: null\r\n};\r\n\r\nexport const appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SHOW_LOADER:\r\n            return { ...state, loading: true };\r\n        case HIDE_LOADER:\r\n            return { ...state, loading: false }\r\n        case SHOW_ALERT:\r\n            return { ...state, alert: action.payload };\r\n        case HIDE_ALERT:\r\n            return { ...state, alert: null }\r\n        default: return state;\r\n    };\r\n};","import { combineReducers } from 'redux';\r\nimport { postReducers } from './reducers/postsReducer';\r\nimport { appReducer } from './reducers/appReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    posts: postReducers,\r\n    app: appReducer\r\n});","import { CREATE_POST } from './../reducers/types';\r\nimport { showAlert } from './../actions/actions';\r\n\r\nconst badWords = ['spam', 'cheats'];\r\n\r\nexport function badWordsMiddleware({ dispatch }) {\r\n    return function (next) {\r\n        return function (action) {\r\n            if (action.type === CREATE_POST) {\r\n                const found = badWords.filter(w => action.payload.title.includes(w));\r\n                if (found.length) {\r\n                    return dispatch(showAlert('Stop spaming!'));\r\n                };\r\n            };\r\n            return next(action);\r\n        };\r\n    };\r\n};","import { put, call, apply } from 'redux-saga/effects';\r\nimport { FETCH_POST } from '../../reducers/types';\r\nimport { hideLoader, showAlert } from './../../actions/actions';\r\nimport { SHOW_LOADER } from './../../reducers/types';\r\n\r\n\r\nexport function* sagaWorker() {\r\n    try {\r\n        yield put({ type: SHOW_LOADER });\r\n        // or\r\n        // yield put(showLoader());\r\n        //\r\n        // const payload = yield call(fetchPosts);\r\n        // or\r\n        const response = yield call(fetch, 'https://jsonplaceholder.typicode.com/posts?_limit=7')\r\n        const payload = yield apply(response, response.json);\r\n        yield put({ type: FETCH_POST, payload });\r\n        // yield put({type: REQUEST_POSTS, payload});\r\n        // yield put(hideLoader());\r\n    } catch (error) {\r\n        yield put(showAlert(error.message));\r\n        // yield put(hideLoader());\r\n    } finally {\r\n        yield put(hideLoader());\r\n    };\r\n};\r\n\r\n// async function fetchPosts() {\r\n//     const response = await fetch('https://jsonplaceholder.typicode.com/posts?_limit=7');\r\n//     return await response.json();\r\n// };","import { takeEvery, all, call } from 'redux-saga/effects';\r\nimport { REQUEST_POSTS } from './../../reducers/types';\r\nimport { sagaWorker } from '../worker/sagaWorker';\r\n\r\nfunction* sagaWatcher() {\r\n    yield takeEvery(REQUEST_POSTS, sagaWorker);\r\n};\r\n\r\nexport function* watchPosts() {\r\n    yield all([call(sagaWatcher)]);\r\n    // yield all([call(sagaWatcher), call(sagaWatcher)]);\r\n};","import { watchPosts } from \"./sagas/watcher/sagasWatcher\";\r\nimport { all, call } from 'redux-saga/effects';\r\n\r\nexport function* rootSaga() {\r\n    yield all([call(watchPosts)]);\r\n};","import { createStore, compose, applyMiddleware } from 'redux';\r\nimport { rootReducer } from './redux/rootReducer';\r\nimport thunk from 'redux-thunk';\r\nimport { badWordsMiddleware } from './redux/customMiddleware/mdwBadWords';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { rootSaga } from './redux/rootSaga';\r\n\r\nconst saga = createSagaMiddleware();\r\n\r\nconst preloadedState = localStorage.getItem('savedPosts') ? JSON.parse(localStorage.getItem('savedPosts')) : undefined;\r\n\r\nconst devTools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\r\nconst composeEnchancer = devTools ? devTools : compose;\r\n\r\nconst middleware = [saga, thunk, badWordsMiddleware];\r\n\r\nconst store = createStore(rootReducer, preloadedState, composeEnchancer(applyMiddleware(...middleware)));\r\n\r\nsaga.run(rootSaga);\r\n\r\nexport { store, saga };\r\n\r\n//Write to localStorage\r\n//localStorage.removeItem('myPosts');\r\nstore.subscribe(() => {\r\n    const state = store.getState();\r\n\r\n    localStorage.setItem('savedPosts', JSON.stringify(state));\r\n})","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './store';\nimport { Provider } from 'react-redux';\n\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}